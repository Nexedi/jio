/*jslint indent: 2, maxlen: 80, nomen: true */
/*global define, jIO, jio_tests, window, test, ok, deepEqual, sinon, expect,
  module */

// define([module_name], [dependencies], module);
(function (dependencies, module) {
  "use strict";
  if (typeof define === 'function' && define.amd) {
    return define(dependencies, module);
  }
  module(jIO, jio_tests);
}(['jio', 'jio_tests', 's3storage'], function (jIO, util) {
  "use strict";

  function generateTools() {
    return {
      clock: sinon.useFakeTimers(),
      spy: util.ospy,
      tick: util.otick
    };
  }

  module("Amazon S3 Storage");

  /*
    Post without id
    Create = POST non empty document
    Post but document already exists
  */

  test("Post", function () {
    var o = generateTools(this);
    o.jio = jIO.newJio({
      "type": "s3",
      "AWSIdentifier": "dontcare",
      "password": "dontcare",
      "server": "jiobucket",
      "url": "https://jiobucket.s3.amazonaws.com"
    });

    o.server = sinon.fakeServer.create();

    //Post without ID (ID is generated by storage)

    o.server.respondWith("GET",
                         "https://jiobucket.s3.amazonaws.com/",
                         [404, {}, "HTML Response"]
                        );

    o.server.respondWith("POST",
                         "https://jiobucket.s3.amazonaws.com/",
                         [204, {}, "HTML Response"]
                        );

    //o.spy(o, "status", 405, "Post without id");
    o.spy(o, "jobstatus", "done", "Post without ID");
    o.jio.post({}, o.f);
    o.clock.tick(1000);
    o.server.respond();
    o.tick(o);
    o.server.restore();


    //Post with ID
    o.server = sinon.fakeServer.create();
    o.server.respondWith("GET",
                         "https://jiobucket.s3.amazonaws.com/post1",
                         [404, {}, "HTML Response"]
                        );

    o.server.respondWith("POST",
                         "https://jiobucket.s3.amazonaws.com/",
                         [204, {}, "HTML Response"]
                        );

    o.spy(o, "value", {'ok': true, 'id': 'post1'}, "Post with ID");
    o.jio.post({"_id": "post1", "title": "myPost1"}, o.f);

    o.clock.tick(1000);
    o.server.respond();
    o.tick(o);
    o.server.restore();


    //Post but document already exists (update)
    o.server = sinon.fakeServer.create();
    o.server.respondWith("GET",
                         "http://s3.amazonaws.com/jiobucket/post2",
                         [200, {}, "HTML Response"]
                        );

    o.spy(o, "status", 409, "Post but document already exists (update)");
    //o.spy(o, "jobstatus", "done", "Post without ID");
    o.jio.post({"_id": "post2", "title": "myPost2"}, o.f);
    o.clock.tick(1000);
    o.server.respond();
    o.tick(o);
    o.server.restore();

    util.closeAndcleanUpJio(o.jio);
  });

  /*
    Put without id
    Create = PUT non empty document
    Updated the document
  */


  test("Put", function () {
    var o = generateTools(this);
    o.jio = jIO.newJio({
      "type": "s3",
      "AWSIdentifier": "dontcare",
      "password": "dontcare",
      "server": "jiobucket",
      "url": "http://s3.amazonaws.com/jiobucket/put1"
    });

    // put without id => id required
    o.server = sinon.fakeServer.create();
    o.spy(o, "status", 20, "Put without id");
    o.jio.put({}, o.f);

    o.clock.tick(5000);
    o.server.respond();
    o.tick(o);
    o.server.restore();

    //Put non empty document
    o.server = sinon.fakeServer.create();
    o.server.respondWith(
      "GET",
      "http://s3.amazonaws.com/jiobucket/http:%252F%252F100%2525_.json",
      [404, {}, "HTML Response"]
    );

    o.server.respondWith(
      "PUT",
      "http://s3.amazonaws.com/jiobucket/http:%252F%252F100%2525_.json",
      [200, {}, "HTML Response"]
    );

    o.spy(o, "value", {"ok": true, "id": "http://100%.json"},
           "PUT non empty document");

    o.jio.put({"_id": "http://100%.json", "title": "myPut1"}, o.f);

    o.clock.tick(5000);
    o.server.respond();
    o.tick(o);
    o.server.restore();

    //Put an existing document (update)
    o.server = sinon.fakeServer.create();
    o.server.respondWith(
      "GET",
      "http://s3.amazonaws.com/jiobucket/http:%252F%252F100%2525_.json",
      [200, {}, "HTML Response"]
    );

    o.server.respondWith(
      "PUT",
      "http://s3.amazonaws.com/jiobucket/http:%252F%252F100%2525_.json",
      [200, {}, "HTML Response"]
    );

    o.spy(o, "value", {"ok": true, "id": "http://100%.json"},
          "PUT non empty document");

    o.jio.put({"_id": "http://100%.json", "title": "myPut1"}, o.f);

    o.clock.tick(1000);
    o.server.respond();
    o.tick(o);
    o.server.restore();

    util.closeAndcleanUpJio(o.jio);

  });


  test("PutAttachment", function () {

    var o = generateTools(this);

    o.jio = jIO.newJio({
      "type": "s3",
      "AWSIdentifier": "dontcare",
      "password": "dontcare",
      "server": "jiobucket",
      "url": "https://jiobucket.s3.amazonaws.com"
    });

    //PutAttachment without document ID (document ID is required)
    o.server = sinon.fakeServer.create();

    //PutAttachment without attachment ID (attachment ID is required)
    o.spy(o, "status", 20, "PutAttachment without doc id -> 20");
    o.jio.putAttachment({"_attachment": "putattmt1"}, o.f);
    o.tick(o);

    // putAttachment without attachment id => 22 Attachment Id Required
    o.spy(o, "status", 22, "PutAttachment without attachment id -> 22");
    o.jio.putAttachment({"_id": "http://100%.json"}, o.f);
    o.tick(o);

    //PutAttachment without underlying document (document is required)
    o.server = sinon.fakeServer.create();
    o.server.respondWith(
      "GET",
      "http://s3.amazonaws.com/jiobucket/http:%252F%252F100%2525_.json",
      [404, {}, "HTML Response"]
    );

    o.spy(o, "status", 404, "PutAttachment without document -> 404");
    o.jio.putAttachment({
      "_id": "http://100%.json",
      "_attachment": "putattmt2"
    }, {"max_retry": 1}, o.f);
    o.clock.tick(1000);
    o.server.respond();
    o.tick(o);
    o.server.restore();

    //PutAttachment
    o.server = sinon.fakeServer.create();
    o.server.respondWith(
      "GET",
      "http://s3.amazonaws.com/jiobucket/http:%252F%252F100%2525_.json",
      [
        200,
        {"Content-Type": "text/plain"},
        '{"_id":"http://100%.json","title":"Hi There!"}'
      ]
    );

    o.server.respondWith(
      "PUT",
      "http://s3.amazonaws.com/jiobucket/http:%252F%252F100%2525_.json",
      [200, {}, "HTML Response"]
    );

    o.server.respondWith(
      "PUT",
      "http://s3.amazonaws.com/jiobucket" +
        "/http:%252F%252F100%2525_.json.body_.html",
      [200, {}, "HTML Response"]
    );

    o.spy(o, "value", {
      "ok": true,
      "id": "http://100%.json",
      "attachment": "body.html"
    }, "PutAttachment");

    o.jio.putAttachment({
      "_id": "http://100%.json",
      "_attachment": "body.html",
      "_mimetype": "text/html",
      "_data": "<h1>Hi There!!</h1><p>How are you?</p>"
    }, {"max_retry": 1}, o.f);

    o.clock.tick(1000);
    o.server.respond();
    o.tick(o);
    o.server.restore();

    util.closeAndcleanUpJio(o.jio);

  });


  /*
    Get non existing document
    Get non existing attachment
    Get document
    Get non existing attachment (doc exists)
    Get attachment
  */

  test("Get", function () {
    var o = generateTools(this);
    o.jio = jIO.newJio({
      "type": "s3",
      "AWSIdentifier": "dontcare",
      "password": "dontcare",
      "server": "jiobucket",
      "url": "https://jiobucket.s3.amazonaws.com"
    });

    //Get non existing document
    o.server = sinon.fakeServer.create();
    o.server.respondWith("GET",
                         "https://jiobucket.s3.amazonaws.com/doc",
                         [404, {}, "HTML Response"]
                        );

    o.spy(o, "status", 404, "Get non existing document");

    o.jio.get("doc", {"max_retry": 1}, o.f);

    o.clock.tick(5000);
    o.server.respond();
    o.tick(o);
    o.server.restore();

    //Get document
    o.server = sinon.fakeServer.create();
    o.server.respondWith(
      "GET",
      "http://s3.amazonaws.com/jiobucket/http:%252F%252F100%2525_.json",
      [
        200,
        {"Content-Type": "text/plain"},
        '{"_id":"http://100%.json","title":"Hi There!"}'
      ]
    );


    o.spy(o, "value", {"_id": "http://100%.json", "title": "Hi There!"},
          "Get document");
    o.jio.get({"_id": "http://100%.json"}, {"max_retry": 1}, o.f);

    o.clock.tick(5000);
    o.server.respond();
    o.tick(o);
    o.server.restore();

    util.closeAndcleanUpJio(o.jio);
  });

  test("GetAttachment", function () {
    var o = generateTools(this);
    o.jio = jIO.newJio({
      "type": "s3",
      "AWSIdentifier": "dontcare",
      "password": "dontcare",
      "server": "jiobucket",
      "url": "https://jiobucket.s3.amazonaws.com"
    });

    //Get non existing attachment
    o.server = sinon.fakeServer.create();
    o.server.respondWith(
      "GET",
      "http://s3.amazonaws.com/jiobucket" +
        "/http:%252F%252F100%2525_.json.body_.html",
      [404, {}, "HTML Response"]
    );

    o.spy(o, "status", 404, "Get non existing attachment");

    o.jio.getAttachment({
      "_id": "http://100%.json",
      "_attachment": "body.html"
    }, {"max_retry": 1}, o.f);

    o.clock.tick(5000);
    o.server.respond();
    o.tick(o);
    o.server.restore();

    //Get attachment
    o.server = sinon.fakeServer.create();
    o.server.respondWith(
      "GET",
      "http://s3.amazonaws.com/jiobucket" +
        "/http:%252F%252F100%2525_.json.body_.html",
      [200, {"Content-Type": "text/plain"}, "My Attachment Content"]
    );

    o.spy(o, "value", "My Attachment Content", "Get attachment");

    o.jio.getAttachment({
      "_id": "http://100%.json",
      "_attachment": "body.html"
    }, {"max_retry": 1}, o.f);

    o.clock.tick(5000);
    o.server.respond();
    o.tick(o);
    o.server.restore();

    util.closeAndcleanUpJio(o.jio);
  });


  //begins the remove tests

  /*
    Remove inexistent document
    Remove inexistent document/attachment
    Remove document
    Check index file
    Check if document has been removed
    Remove one of multiple attachment
    Check index file
    Remove one document and attachment together
    Check index file
    Check if attachment has been removed
    Check if document has been removed
  */

  test("Remove", function () {

    var o = generateTools(this);

    o.jio = jIO.newJio({
      "type": "s3",
      "AWSIdentifier": "dontcare",
      "password": "dontcare",
      "server": "jiobucket",
      "url": "https://jiobucket.s3.amazonaws.com/"
    });

    //Remove non-existing document
    o.server = sinon.fakeServer.create();
    o.server.respondWith(
      "DELETE",
      "http://s3.amazonaws.com/jiobucket/http:%252F%252F100%2525_.json",
      [404, {}, "HTML RESPONSE"]
    );

    o.spy(o, "status", 404, "Remove non existing document");
    o.jio.remove({"_id": "http://100%.json"}, o.f);
    o.clock.tick(5000);
    o.server.respond();
    o.server.restore();

    //Remove document
    o.server = sinon.fakeServer.create();
    o.server.respondWith(
      "DELETE",
      "http://s3.amazonaws.com/jiobucket/http:%252F%252F100%2525_.json",
      [200, {"Content-Type": "text/plain"}, "My Attachment Content"]
    );

    o.spy(o, "value", {"ok": true, "id": "http://100%.json"},
          "Remove document");
    o.jio.remove({"_id": "http://100%.json"}, o.f);
    o.clock.tick(5000);
    o.server.respond();
    o.tick(o);
    o.server.restore();

    //Remove document with multiple attachments
    o.server = sinon.fakeServer.create();

    o.server.respondWith(
      "GET",
      "http://s3.amazonaws.com/jiobucket/http:%252F%252F100%2525_.json",
      [
        200,
        {"Content-Type": "text/html"},
        JSON.stringify({
          "_attachments": {
            "body.html": {
              "length": 32,
              "digest": "md5-dontcare",
              "content_type": "text/html"
            },
            "other": {
              "length": 3,
              "digest": "md5-dontcare-again",
              "content_type": "text/plain"
            }
          }
        })
      ]
    );

    o.server.respondWith(
      "DELETE",
      "http://s3.amazonaws.com/jiobucket/http:%252F%252F100%2525_.json",
      [200, {"Content-Type": "text/plain"}, "<h1>Deleted</h1>"]
    );

    o.server.respondWith(
      "DELETE",
      "http://s3.amazonaws.com/jiobucket" +
        "/http:%252F%252F100%2525_.json.body_.html",
      [200, {"Content-Type": "text/plain"}, "<h1>Deleted</h1>"]
    );

    o.server.respondWith(
      "DELETE",
      "http://s3.amazonaws.com/jiobucket/http:%252F%252F100%2525_.json.other",
      [200, {"Content-Type": "text/plain"}, "<h1>Deleted</h1>"]
    );

    o.spy(o, "value", {"ok": true, "id": "http://100%.json"},
          "Remove document containing multiple attachments");
    o.jio.remove({"_id": "http://100%.json"}, {"max_retry": 1}, o.f);
    o.clock.tick(1000);
    o.server.respond();
    o.tick(o);
    o.server.restore();

    util.closeAndcleanUpJio(o.jio);
  });

  test("RemoveAttachment", function () {

    var o = generateTools(this);

    o.jio = jIO.newJio({
      "type": "s3",
      "AWSIdentifier": "dontcare",
      "password": "dontcare",
      "server": "jiobucket",
      "url": "https://jiobucket.s3.amazonaws.com/"
    });

    //Remove non-existing attachment
    o.server = sinon.fakeServer.create();

    o.server.respondWith(
      "DELETE",
      "http://s3.amazonaws.com/jiobucket" +
        "/http:%252F%252F100%2525_.json.body_.html",
      [404, {}, "HTML RESPONSE"]
    );

    o.spy(o, "status", 404, "Remove non existing attachment");
    o.jio.removeAttachment({
      "_id": "http://100%.json",
      "_attachment": "body.html"
    }, {"max_retry": 1}, o.f);
    o.clock.tick(5000);
    o.server.respond();
    o.server.restore();

    //Remove attachment
    o.server = sinon.fakeServer.create();

    o.server.respondWith(
      "GET",
      "http://s3.amazonaws.com/jiobucket/http:%252F%252F100%2525_.json",
      [
        200,
        {"Content-Type": "text/plain"},
        '{"_id":"http://100%.json","title":"Hi There!"}'
      ]
    );

    o.server.respondWith(
      "PUT",
      "http://s3.amazonaws.com/jiobucket/http:%252F%252F100%2525_.json",
      [
        200,
        {"Content-Type": "text/plain"},
        '{"_id":"http://100%.json","title":"Hi There!"}'
      ]
    );

    o.server.respondWith(
      "DELETE",
      "http://s3.amazonaws.com/jiobucket" +
        "/http:%252F%252F100%2525_.json.body_.html",
      [200, {"Content-Type": "text/plain"}, "My Attachment Content"]
    );

    o.spy(o, "value", {
      "ok": true,
      "id": "http://100%.json",
      "attachment": "body.html"
    }, "Remove attachment");

    o.jio.removeAttachment({
      "_id": "http://100%.json",
      "_attachment": "body.html"
    }, {"max_retry": 1}, o.f);

    o.clock.tick(5000);
    o.server.respond();
    o.tick(o);
    o.server.restore();

    util.closeAndcleanUpJio(o.jio);
  });


  test("AllDocs", function () {

    var o = generateTools(this);

    o.jio = jIO.newJio({
      "type": "s3",
      "AWSIdentifier": "dontcare",
      "password": "dontcare",
      "server": "jiobucket",
      "url": "https://jiobucket.s3.amazonaws.com/"
    });

    //allDocs without option
    o.server = sinon.fakeServer.create();

    o.server.respondWith(
      "GET",
      "http://s3.amazonaws.com/jiobucket/",
      [
        204,
        {},
        '<?xml version="1.0" encoding="UTF-8"?><ListBucketResult xml' +
          'ns="http://s3.amazonaws.com/doc/2006-03-01/"><Name>jiobucke' +
          't</Name><Prefix></Prefix><Marker></Marker><MaxKeys>1000</Ma' +
          'xKeys><IsTruncated>false</IsTruncated><Contents><Key>docume' +
          'ntONE</Key><LastModified>2013-05-03T15:32:01.000Z</LastModi' +
          'fied><ETag>&quot;8a65389818768e1f5e6530a949233581&quot;</ET' +
          'ag><Size>163</Size><Owner><ID>5d09e586ab92acad85e9d053f769c' +
          'ce65f82178e218d9ac9b0473f3ce7f89606</ID><DisplayName>jonath' +
          'an.rivalan</DisplayName></Owner><StorageClass>STANDARD</Sto' +
          'rageClass></Contents><Contents><Key>documentONE.1st_Attachm' +
          'ent_manual</Key><LastModified>2013-05-03T15:32:02.000Z</Las' +
          'tModified><ETag>&quot;f391dec65366d2b470406bc7b9595dea&quot' +
          ';</ETag><Size>35</Size><Owner><ID>5d09e586ab92acad85e9d053f' +
          '769cce65f82178e218d9ac9b0473f3ce7f89606</ID><DisplayName>jo' +
          'nathan.rivalan</DisplayName></Owner><StorageClass>STANDARD<' +
          '/StorageClass></Contents></ListBucketResult>'
      ]
    );

    o.spy(o, "jobstatus", "done", "AllDocs without include docs");
    o.jio.allDocs(o.f);
    o.clock.tick(5000);
    o.server.respond();
    o.tick(o);
    o.server.restore();

    //allDocs with the include docs option
    o.server = sinon.fakeServer.create();

    o.server.respondWith(
      "GET",
      "http://s3.amazonaws.com/jiobucket/",
      [
        204,
        {},
        '<?xml version="1.0" encoding="UTF-8"?><ListBucketResult xml' +
          'ns="http://s3.amazonaws.com/doc/2006-03-01/"><Name>jiobucke' +
          't</Name><Prefix></Prefix><Marker></Marker><MaxKeys>1000</Ma' +
          'xKeys><IsTruncated>false</IsTruncated><Contents><Key>docume' +
          'ntONE</Key><LastModified>2013-05-03T15:32:01.000Z</LastModi' +
          'fied><ETag>&quot;8a65389818768e1f5e6530a949233581&quot;</ET' +
          'ag><Size>163</Size><Owner><ID>5d09e586ab92acad85e9d053f769c' +
          'ce65f82178e218d9ac9b0473f3ce7f89606</ID><DisplayName>jonath' +
          'an.rivalan</DisplayName></Owner><StorageClass>STANDARD</Sto' +
          'rageClass></Contents><Contents><Key>documentONE.1st_Attachm' +
          'ent_manual</Key><LastModified>2013-05-03T15:32:02.000Z</Las' +
          'tModified><ETag>&quot;f391dec65366d2b470406bc7b9595dea&quot' +
          ';</ETag><Size>35</Size><Owner><ID>5d09e586ab92acad85e9d053f' +
          '769cce65f82178e218d9ac9b0473f3ce7f89606</ID><DisplayName>jo' +
          'nathan.rivalan</DisplayName></Owner><StorageClass>STANDARD<' +
          '/StorageClass></Contents></ListBucketResult>'
      ]
    );

    o.server.respondWith(
      "GET",
      "http://jiobucket.s3.amazonaws.com/documentONE",
      [
        200,
        {"Content-Type": "text/html"},
        JSON.stringify({
          "_attachments": {
            "body.html": {
              "length": 32,
              "digest": "md5-dontcare",
              "content_type": "text/html"
            },
            "other": {
              "length": 3,
              "digest": "md5-dontcare-again",
              "content_type": "text/plain"
            }
          }
        })
      ]
    );


    o.spy(o, "jobstatus", "done", "AllDocs with include docs");
    o.jio.allDocs({"include_docs": true}, o.f);
    o.clock.tick(5000);
    o.server.respond();
    o.tick(o);
    o.server.restore();

    util.closeAndcleanUpJio(o.jio);
  });

}));
